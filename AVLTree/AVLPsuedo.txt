class Tree{
    
    BF(X)=height(rightSubtree(X))−height(leftSubtree(X)) <- formula for the balance factor
    
    Node add(value) {
        if node == null new AVLTreeNode(data);
        

        if data < node.data
            recurse to node.left
          else if data > node.data 
            recurse to node.right
         else 
            duplicate data not allowed in tree
            
        

        Update height of this ancestor node
        updateHeight(node)

        Get the balance factor
        balance = height(rightSubtree(X))−height(leftSubtree(X))

        Left Left Case: Single right rotation
        if (balance > 1 && data < node.left.data) 
            rotate node right
        

        Right Right Case: Single left rotation
        if (balance < -1 && data > node.right.data) 
            rotate node left
        

        Left Right Case: Left then right rotations
        if (balance > 1 && data > node.left.data) 
            rotate node.left to left, the rotate right
            node.left = leftRotate(node.left); Left rotation on the left child
        return rightRotate(node); Right rotation on the unbalanced node
        

        Right Left Case: Right then left rotations
        if (balance < -1 && data < node.right.data) 
            rotate node.right right. then rotate left
            node.right = rightRotate(z.right); Right rotation on the right branch
            leftRotate(node); Left rotation on the unbalanced node
        

        return node
    }
}